name: Build On Push

on:
  push:
    branches: [ ci-create-release ]
    tags: '*'

jobs:
  build_main:
    name: Build for ${{ matrix.target_branch }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        target_branch:
          - sm-latest
          - sm-1.11
        include:
          - dbg_ext: pdb

          - target_branch: sm-latest
            mm_branch: "master"
            sm_branch: "master"

          - target_branch: sm-1.11
            mm_branch: "1.11-dev"
            sm_branch: "1.11-dev"
    env:
      DEPENDENCIES_FOLDER: dependencies
      DEPENDENCIES_ROOT: ${{ github.workspace }}/dependencies

    steps:
    - name: Add msbuild to PATH (Windows)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v1.1.3

    - name: Install (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        :: See https://github.com/microsoft/vswhere/wiki/Find-VC
        for /f "usebackq delims=*" %%i in (`vswhere -latest -property installationPath`) do (
          call "%%i"\Common7\Tools\vsdevcmd.bat -arch=x86 -host_arch=x64
        )
        
        :: Loop over all environment variables and make them global.
        for /f "delims== tokens=1,2" %%a in ('set') do (
          echo>>"%GITHUB_ENV%" %%a=%%b
        )
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Setup ambuild
      run: |
        python -m pip install wheel
        pip install git+https://github.com/alliedmodders/ambuild
    - name: Fetch Metamod:Source ${{ matrix.mm_branch }}
      uses: actions/checkout@v3
      with:
        repository: alliedmodders/metamod-source
        ref: ${{ matrix.mm_branch }}
        path: mmsource

    - name: Fetch SourceMod ${{ matrix.sm_branch }}
      uses: actions/checkout@v3
      with:
        repository: alliedmodders/sourcemod
        ref: ${{ matrix.sm_branch }}
        path: sourcemod
        submodules: recursive

    - name: Fetch Dependencies
      shell: bash
      run: |
        mkdir -p ${{ env.DEPENDENCIES_FOLDER }}
        cd ${{ env.DEPENDENCIES_FOLDER }}

        git clone --mirror https://github.com/alliedmodders/hl2sdk hl2sdk-proxy-repo
        sdks=(tf2 sdk2013)
        for sdk in "${sdks[@]}"
        do
          git clone hl2sdk-proxy-repo -b $sdk hl2sdk-$sdk
        done

    - name: Fetch PathFollower
      uses: actions/checkout@v3
      with:
        path: pathfollower

    - name: Build Files
      working-directory: pathfollower
      run: |
        mkdir post
        cd post
        python3 ../configure.py --enable-optimize --sdks=tf2 --hl2sdk-root="${{ env.DEPENDENCIES_ROOT }}" --sm-path="${{ github.workspace }}/sourcemod" --mms-path="${{ github.workspace }}/mmsource"
        ambuild

    - name: Get Short SHA
      uses: benjlevesque/short-sha@v2.1
      id: short-sha

    - name: Upload Artifact for ${{ matrix.target_branch }}
      if: "!startsWith(github.ref, 'refs/tags/')"
      uses: actions/upload-artifact@v3
      with:
        name: pathfollower-${{ matrix.target_branch }}-${{ steps.short-sha.outputs.sha }}
        path: |
            pathfollower/post/package/*

    - name: Upload Debug Symbols for ${{ matrix.target_branch }}
      if: "!startsWith(github.ref, 'refs/tags/')"
      uses: actions/upload-artifact@v3
      with:
        name: pathfollower-dbgsym-${{ matrix.target_branch }}-${{ steps.short-sha.outputs.sha }}
        path: |
            pathfollower/post/**/*.${{ matrix.dbg_ext }}

    # creates a release package to be uploaded, skipped if the trigger commit does not have a tag
    - name: Build Release Package for ${{ matrix.target_branch }}
      if: startsWith(github.ref, 'refs/tags/')
      working-directory: pathfollower
      shell: cmd
      run: |
        cd post/package
        7z a -bb3 -mx9 -r "pathfollower-${{ matrix.target_branch }}-${{ steps.short-sha.outputs.sha }}.zip" addons

    # Cache release package to be retreived by the create_release job
    - name: Cache Release Package
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/cache@v3.0.11
      id: cache
      with:
        path: |
          pathfollower/post/package/*.zip
        key: pathfollower-${{ github.ref_name }}-${{ matrix.target_branch }}


  # Job for creating a release, waits for build_main to finish
  create_release:
    name: Upload Release
    runs-on: windows-latest
    needs: [ build_main ]
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      fail-fast: false
    env:
      RELEASE_ROOT: ${{ github.workspace }}/pathfollower/post/package

    steps:
    # Retrive the cached files from the previous jobs
    - name: Retreive Release Package From Cache
      uses: actions/cache@v3.0.11
      id: cache1
      with:
        path: |
          pathfollower/post/package/*.zip
        key: pathfollower-${{ github.ref_name }}-sm-latest

    # To do: retreive both caches using a single step
    - name: Retreive Release Package From Cache
      uses: actions/cache@v3.0.11
      id: cache2
      with:
        path: |
          pathfollower/post/package/*.zip
        key: pathfollower-${{ github.ref_name }}-sm-1.11

    - name: Create Release
      uses: softprops/action-gh-release@v0.1.15
      with:
        name: "Path Follower ${{ github.ref_name }}"
        generate_release_notes: true
        files:  |
          pathfollower/**/*.zip
